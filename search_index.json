[["index.html", "JavaScript for R Book Club Welcome", " JavaScript for R Book Club The R4DS Online Learning Community 2022-09-01 Welcome Welcome to the bookclub! This is a companion for the book JavaScript for R by John Coene (Chapman &amp; Hall/CRC, copyright July 16, 2021, 9780367680633). This companion is available at r4ds.io/js4r. This website is being developed by the R4DS Online Learning Community. Follow along, and join the community to participate. This companion follows the R4DS Online Learning Community Code of Conduct. "],["book-club-meetings.html", "Book club meetings", " Book club meetings Each week, a volunteer will present a chapter from the book (or part of a chapter). This is the best way to learn the material. Presentations will usually consist of a review of the material, a discussion, and/or a demonstration of the principles presented in that chapter. More information about how to present is available in the github repo. Presentations will be recorded, and will be available on the R4DS Online Learning Community YouTube Channel. "],["pace.html", "Pace", " Pace We’ll try to cover 1 chapter/week, but… …It’s ok to split chapters when they feel like too much. We will try to meet every week, but will likely take some breaks for holidays, etc. "],["overview.html", "Chapter 1 Overview", " Chapter 1 Overview Learning objectives: Book-club admin Introductions Repository Set-up for contributors Explain why JavaScript may be a useful tool for an R developer Introduce some JavaScript libraries R packages that use JavaScript JavaScript training material / tutorials "],["rationale.html", "1.1 Rationale", " 1.1 Rationale R &amp; JS have quite different responsibilities Why use JavaScript as an R dev JS might have solved your problem JS can do things that R cannot To improve communication of insights R packages that use JavaScript {rmapshaper} integrates the mapshaper library {plotly} uses plotly {waiter} based on various JS libraries "],["integration-methods.html", "1.2 Methods", " 1.2 Methods Many ways to integrate JS with R Run JS code from R {V8} V8 on CRAN Used by {rmapshaper} V8 is a JavaScript engine (used in Chrome and Node.js) Send data from R to JS, for viewing in the browser {htmlwidgets} htmlwidgets on CRAN Send data from R to JS for viewing in the browser Used to wrap JS visualisation libraries Used by {plotly}, {DT}, {highcharter} Pass data back &amp; forth between R and the browser {shiny} e.g., {waiter} "],["methods-amiss.html", "1.3 Methods Amiss", " 1.3 Methods Amiss Things that aren’t covered by the book Send data from R to a specific front-end JS framework React See {reactR} … and its use in{reactable} Vue See {vueR} Use existing R packages to send data to a JS data visualisation library D3 See {r2d3} "],["some-code.html", "1.4 Some code", " 1.4 Some code Plotly example Run the following Investigate the plot Look at the HTML in DevTools (id=“htmlwidget-”) See where the htmlwidget script is read in suppressPackageStartupMessages({ library(plotly) }) plot_ly( diamonds, x = ~cut, color = ~clarity, type = &quot;histogram&quot;, width = &quot;100%&quot; ) "],["resources.html", "1.5 Resources", " 1.5 Resources Awesome-JavaScript Data visualisation section MDN JavaScript guides / tutorials JavaScript 4 Shiny Field Notes Using htmlwidgets in Rmarkdown "],["meeting-videos.html", "1.6 Meeting Videos", " 1.6 Meeting Videos 1.6.1 Cohort 1 Meeting chat log 00:18:47 Russ Hyde: https://r4ds.io/js4r 00:20:46 Arthur Shaw: https://github.com/r4ds/bookclub-js4r 00:34:26 Ryan Metcalf: https://mermaid-js.github.io/mermaid/#/ 00:34:58 Arthur Shaw: Looks like DiagrammeR does indeed use mermaid.js. Not sure if for all or only part. https://github.com/rich-iannone/DiagrammeR/tree/main/inst/htmlwidgets/lib/mermaid 00:37:01 Ryan Metcalf: Excellent comment Arthur. I was going to post a method of code snippet calling on JS. Maybe sometime soon in our bookdown output. 00:53:15 Ryan Metcalf: My links are scrapped from Twitter….I&#39;m not as familiar with React as with Node.js. https://nextjs.org/ 00:53:38 LUCIO ENRIQUE CORNEJO RAMÍREZ: is the bidirectional communication only available when using Shiny? Or do other methods to integrate JS and R also allow for such communication? 00:53:42 Ryan Metcalf: https://immerjs.github.io/immer/ 00:53:56 Ryan Metcalf: https://reactjs.org/tutorial/tutorial.html 00:58:20 Ryan Metcalf: Great question Lucio. My gut instinct answer is no. Any JS engine should be available. However, I may be misinterpreting the &quot;WebServer&quot; that Shiny / RStudio use by default. 00:59:12 Ryan Metcalf: As a continuation, I would say, any &quot;WebServer&quot; via: React, Python, R, Ruby, Ruby on Rails, NodeJS, etc.... should provide a similar relationship. 01:00:41 LUCIO ENRIQUE CORNEJO RAMÍREZ: Thanks, Ryan ! 01:01:52 Ryan Metcalf: I&#39;m still forming a method to give better guidance. Stick with me and I&#39;ll likely find a more direct answer. 01:08:08 Rhian: Awesome - thanks Russ 01:08:57 Arthur Shaw: https://ambiorix.dev/ ? 01:13:51 Russ Hyde: Thanks everyone "],["prerequisites.html", "Chapter 2 Prerequisites", " Chapter 2 Prerequisites Learning objectives: Know what you need to know R package development JSON JavaScript Shiny Learn just enough about each topic "],["why-prerequisites-are-requisite.html", "2.1 Why prerequisites are requisite", " 2.1 Why prerequisites are requisite In the last chapter, we were introduced to a few methods for integrating R and JS: Running JS from R Sending data from R to JS, for use in the browser Passing data back and forth between R and the browser In this chapter, we will dive into a few of the prerequisites for exploring these methods in further detail: R package development. If one wants to integrate R and JS code, packages provide a way to share both JS code (or library) and R code for making JS available through R. JSON. If want to share/pass data between R and JS, JSON is the lingua franca. JavaScript. If one wants to work with JS (in the browser), it is good to know some basics: How to see where JS works How variables work How JS interacts with the DOM Shiny. If one wants to use JS in Shiny, one needs to know a few main mechanisms for bringing JS into Shiny apps. "],["r-package-development.html", "2.2 R package development", " 2.2 R package development 2.2.1 How to create packages Create: From the RStudio GUI, File &gt; New Project &gt; New Directory &gt; R Package From the console, usethis::create_package(\"mypackage\") Develop: The very short version: Create content Add scripts/functions usethis::use_r(\"MyScript\") Document Add R dependencies (usethis::use_package(\"SomePackage\")) Write tests usethis::use_test(\"MyScript\") # makes ./tests/testthat/test-MyScript.R Test content interactively, load package and tinker (devtools::load_all()) formally, run tests (devtools::check()) Fix issues Rinse and repeat The longer and more helpful version can be found in “The Whole Game” chapter of R Packages. 2.2.2 What constitutes a package 2.2.2.1 Metadata Two main files: DESCRIPTION and NAMESPACE. DESCRIPTION, among other things, provides a list what needs to be installed in order for the package to work (i.e., “imports”). NAMESPACE dictates which functions, of those defined in the package, are made available for use (i.e., “exports”). 2.2.2.2 R code What: functions defined by the package How: write one or more .R script, where each script defines one or more function. Where: in R/ 2.2.2.3 Documentation What: documentation for functions What the function does What the parameters are Details, examples, etc. Where: just above each function definition in the .R scripts in R/. How: When writing functions, use special comments #' and tags (e.g., #' @param) provided by the {roxygen} package When building the package, devtools::document() creates separate documentation files for end users and stores them in man/. 2.2.2.4 Installed files What: In general, files that are downloaded as-is into the top level package directory when the package is installed. For our purposes, JS scripts or libraries. Where: When developing, located in inst/ After installing, located in the root of the package directory. How: Copy files in inst/ Write code to link R and JS. Add the programming language to the SystemRequirements field of DESCRIPTION. See (slightly) more here Examples found in the wild: {echarts4r} wraps echarts.js {reactable} wraps React Table {dataui} wraps data-ui "],["json.html", "2.3 JSON", " 2.3 JSON 2.3.1 Serializing “Serializing” means converting data to JSON format JSON format is the equivalent of a list in R. See example here {jsonlite} provides a Rosetta stone for translating data bi-directionally between R and JSON: From R to JSON jsonlite::toJSON() From JSON to R jsonlite::fromJSON() 2.3.2 Tablular data How JSON represents a data frame In R, a data frame is a list of columns In JSON, which has no such concept, a data frame is “translated” as a list of rows, where each row is itself a JSON object. See this nice graphical example. How R handles rectangular data from JSON See code examples below table example. "],["javascript.html", "2.4 JavaScript", " 2.4 JavaScript 2.4.1 Developer tools Pop the hood by inspecting page In browser, see here for Chrome, for example. In RStudio IDE, which is built on Chromium, can use similar tools. Views of interest Elements. Shows the DOM, which could help inspect HTML produced by R (e.g., Shiny app). Console. Much like the R console, shows messages, warnings, and errors, which could be helpful in understanding and debugging issues. 2.4.2 How JS variables differ from R Declaration Can declare variable without assigning a value Can declare variables in three ways: var. Define a variable of global scope. let. Define a variable of restricted scope. const. Define a variable whose value cannot be changed. Scope What is scope. In effect, the accessibility of an object. Which scopes in JS; how compare to R. Global. Like objects in R’s global environment. Function. Like variables inside an R function. Block. No direct R equivalent. Accessible within a block between { }. See more here. 2.4.3 Document Object Model (DOM) What is the DOM Description of an HTML page as a tree of the elements and attributes that comprise the page. Elements are characterized by one or more of: ID Tag Class(es) Etc See visual explanation here. How JS interacts with the DOM Select/query by: ID Tag Class Change content and/or attributes of the element See nice summary here. "],["shiny.html", "2.5 Shiny", " 2.5 Shiny Two ways to import JS dependences in Shiny: Serving files (e.g., JS script) Using {htmltools} 2.5.1 Serving static files Types of static files Images CSS stylesheets JS scripts How to serve files to Shiny Option 1: when shiny::runApp is run, load everything in www/ directory. Option 2: specify path via shiny::addResourcePath and load those resources. How to use shiny::addResourcePath Parameters directoryPath. Where in file system to find file(s). prefix. Where in URL to make file(s) available. Placement In raw HTML, inside the &lt;head&gt;, with a &lt;script&gt; tag that points to the source file. In Shiny, in a special place in the ui. Inside same tags as in raw HTML Inside singleton so that the files are served only once. Best practices organizing static files Unspoken recommendations; not hard rules Single folder to contain the collections of files (e.g., assets/, static/) Subfolder for each type of file (e.g., CSS, JS, image, etc.) 2.5.2 htmltools What does htmltools do? Prosaically, helps create HTML tags More importantly for our purposes, helps with importing and managing external dependences How does htmltools help manage dependencies? Provides an R interface. Creates a dependency object that R resolves as an actual HTML dependency. Points to a dependence in a package directory. If a package is the source of a dependency, can construct a relative path to package library’s inst/, where dependency lives. Where to place htmltools in R scripts? In Shiny, in the UI. Similar to serving files, but simpler. In RMarkdown, in an evaluated code chuck. "],["serving-files-v.html", "2.6 Serving files v. htmltools", " 2.6 Serving files v. htmltools Why prefer htmltools? Available in both Shiny and RMarkdown, while serving files only works for Shiny. Allows one to assess a package’s dependencies, which helps in cases where dependencies of two packages may conflict. Why use shiny::addResourcePath? Certainly, useful for loading JS and CSS. But also useful for other file types that an app may need, such as images or JSON data. "],["meeting-videos-1.html", "2.7 Meeting Videos", " 2.7 Meeting Videos 2.7.1 Cohort 1 Meeting chat log 00:26:37 Russ Hyde: Do javascript libraries have a defined structure, like R packages, or are they more freeform? 00:32:37 Russ Hyde: https://cran.r-project.org/web/packages/tidyjson/vignettes/introduction-to-tidyjson.html 00:44:15 Ryan Metcalf: I&#39;ve watched this video multiple times and IMHO does a great job of working through API calls and/or uses `jsonlite()` to manipulate to a dataframe. https://youtu.be/tlaJf0CHbFE 01:15:59 Ryan S: sorry, need to drop off. but thanks to all for the effort and to Arthur for preparation! "],["introduction-to-widgets.html", "Chapter 3 Introduction to Widgets", " Chapter 3 Introduction to Widgets Learning objectives: Review alternative packages for interaction between JavaScript and R. Dive into using {plotly} for graphics. Expand on using {DT} for Data Tables. Understand what {crosstalk} is and how to deploy it to {shiny}. {htmlwidgets} is a succsseor to {rCharts}. HTML Widgets can be: Used at the R console for data analysis just like conventional R plots. Embedded within R Markdown documents Incorporated into Shiny web applications. Saved as standalone web pages for ad-hoc sharing via email, Dropbox, etc. (My personal favorite!!!) There are currently 127 registered widgets on gallery.htmlwidgets.org "],["plotly-package.html", "3.1 Plotly Package", " 3.1 Plotly Package Often, the first graphing example a new user experiences is found in R for Data Science by Hadley Wickham and Garrett Grolemund. In this example, the author describes the grammer of graphics and the {ggplot2} package. library(ggplot2) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) Technically, there is nothing wrong with a static image and no interaction. As long as you convey your intent, your job is done. Or is it? However, is {ggplot} our only graphic utility/package/service? Certainly NO! Let’s discuss plotly. The author comments “(plotly)…has been downloaded from CRAN 4.9 million times at the time of writing this.” I wanted to double check or update the stats. Using DataScienceMeta, the site lists plotly has been downloaded 10,129,165 and is the 179th most popular downloaded (out of 18,641)! library(plotly) plot_ly(cars, x = ~speed, y = ~dist) %&gt;% add_markers() Citation: JavaScript for R by John Coene, Chapter 3, figure 3.1 Wrap existing ggplot graphics with ggplotly, making them interactive Initialize the chart with plot_ly Key differences between ggplot and plotly: - ggplot uses + to add layers - this isn’t horrible but doesn’t lend itself to symatics and often feels like a speedbump while authoring - plotly recognizes the {magrittr} pipe %&gt;% operator. If using this syntax for authoring, your script text flows easier. To achieve this layering in Plotly, we use the add_ prefix. library(magrittr) library(plotly) plot_ly(mtcars, x = ~disp) %&gt;% add_markers(y = ~mpg, text = rownames(mtcars)) %&gt;% add_lines(y = ~fitted(loess(mpg ~ disp))) Citation: JavaScript for R by John Coene, Chapter 3, figure 3.3 "],["dt-package.html", "3.2 DT Package", " 3.2 DT Package The {DT} package provides an R Interface to the jQuery JavaScript Library DataTables. (Not to be confused or remotely the same as Data.Tables). Unique characteristics of DataTables versus HTML tables alone are: Pagination Instant Search Multi-column ordering Use almost any datasource Easily Theme-able Wide Variety of extensions The following is a one-line snippet example of producing an interactivec DataTable. library(DT) DT::datatable(cars) Citation: JavaScript for R by John Coene, Chapter 3, figure 3.4 "],["crosstalk.html", "3.3 Crosstalk", " 3.3 Crosstalk Crosstalk is a an add-on to the {htmlwidgets} package providing cross-widget interactions. Specifically supported at this time are: linked brushing filtering A couple limitations to using Crosstalk: HTML widgets must be specifically modified by their authors. Crosstalk currently only works for linked brushing and filtering of views that show individual data points, not aggregate or summary views. Crosstalk is not appropriate for large data sets. Cross talk uses a shared R6 class to wrap existing dataframes. library(crosstalk) library(d3scatter) shared_iris &lt;- SharedData$new(iris) bscols( d3scatter(shared_iris, ~Petal.Length, ~Petal.Width, ~Species, width=&quot;100%&quot;, height=300), d3scatter(shared_iris, ~Sepal.Length, ~Sepal.Width, ~Species, width=&quot;100%&quot;, height=300) ) Citation: Using Crosstalk shared_mtcars &lt;- SharedData$new(mtcars) bscols(widths = c(3,NA,NA), list( filter_checkbox(&quot;cyl&quot;, &quot;Cylinders&quot;, shared_mtcars, ~cyl, inline = TRUE), filter_slider(&quot;hp&quot;, &quot;Horsepower&quot;, shared_mtcars, ~hp, width = &quot;100%&quot;), filter_select(&quot;auto&quot;, &quot;Automatic&quot;, shared_mtcars, ~ifelse(am == 0, &quot;Yes&quot;, &quot;No&quot;)) ), d3scatter(shared_mtcars, ~wt, ~mpg, ~factor(cyl), width=&quot;100%&quot;, height=250), d3scatter(shared_mtcars, ~hp, ~qsec, ~factor(cyl), width=&quot;100%&quot;, height=250) ) Cylinders 4 6 8 Horsepower Automatic Citation: Using Crosstalk "],["wrap-up.html", "3.4 Wrap-Up", " 3.4 Wrap-Up The following link provides additional {crosstalk} compatible services. Any Questions? "],["meeting-videos-2.html", "3.5 Meeting Videos", " 3.5 Meeting Videos 3.5.1 Cohort 1 Meeting chat log 00:07:40 russ: Hi everyone 00:18:14 russ: http://gallery.htmlwidgets.org/ 00:18:19 russ: http://www.datasciencemeta.com/ 00:22:15 russ: There&#39;s a whole book about {plotly} - https://plotly-r.com/index.html 00:34:24 Arthur Shaw: For reference, here&#39;s {reactable}: https://glin.github.io/reactable/index.html 01:04:31 russ: https://rstudio.github.io/crosstalk/widgets.html 01:04:54 Arthur Shaw: {reactable} working with {crosstalk}: https://glin.github.io/reactable/articles/examples.html#cross-widget-interactions 01:04:57 russ: There is a statement at the top of the compatible widgets page: &quot;To add a widget, please submit a PR with modifications to this page.&quot; "],["basics-of-building-widgets.html", "Chapter 4 Basics of Building Widgets", " Chapter 4 Basics of Building Widgets Learning objectives: Explore how to use JS visualisation libraries from .HTML pages Discuss the details (data / dependencies / context) needed by a typical JS library Summarise how htmlwidgets ensures these details are in place "],["read-and-study.html", "4.1 Read and Study", " 4.1 Read and Study So, you have found a front-end JS library you want to use from R Now: Learn how to use that library from JS/HTML first USE IT! Work through a tutorial INSTALL IT! Analyse it’s dependencies / installation process SEE HOW OTHERS USE IT! Study the examples Hopefully: consistent syntax STUDY IT! Look at the API USE IT AGAIN! Code up some of your use-cases using mock data, but in JS/HTML Can you improve the API for your use-case? "],["candidate-libraries.html", "4.2 Candidate Libraries", " 4.2 Candidate Libraries Here we work out how to use some JS visualisation libraries in their natural setting: as part of an .html page. The files have been rewritten slightly, to emphasise similarities / differences between the libraries. 4.2.1 HTML / DOM recap &lt;!–– index.html - Modified from Chapter 2 ––&gt; &lt;html&gt; &lt;head&gt; &lt;!-- Nondisplayed content goes here: - Metadata (title / character encoding) - _Some_ dependency loading (stylesheet / library) --&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Displayed content goes here --&gt; &lt;p id=&quot;content&quot;&gt;Trying JavaScript!&lt;/p&gt; &lt;script&gt; var cnt = document.getElementById(&quot;content&quot;); cnt.innerText = &quot;The text has changed&quot;; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Library loading Book examples load libraries from .html-adjacent location: &lt;head&gt; &lt;!-- Import library --&gt; &lt;script src=&quot;highcharts.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; Here, we access the libraries from CDN (Content Delivery Network) &lt;head&gt; &lt;!-- Import library --&gt; &lt;script src=&quot;https://code.highcharts.com/highcharts.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; 4.2.2 Plotly.js &lt;!-- Source: &quot;Javascript For R&quot; John Coene, Chapter 4 --&gt; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt; &lt;head&gt; &lt;!-- Import library --&gt; &lt;script src=&quot;https://cdn.plot.ly/plotly-2.12.1.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Plotly.js&lt;/p&gt; &lt;!-- div to hold visualisation --&gt; &lt;div id=&quot;chart&quot; style=&quot;width:600px;height:400px;&quot;&gt;&lt;/div&gt; &lt;!-- Script to create visualisation --&gt; &lt;script&gt; el = document.getElementById(&#39;chart&#39;); var rawData = { x: [1, 2, 3, 4, 5], y: [1, 2, 4, 8, 16] }; var plotData = [rawData]; Plotly.newPlot(el, plotData); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 4.2.3 Highcharts.js &lt;!-- Source: &quot;Javascript For R&quot; John Coene, Chapter 4 --&gt; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt; &lt;head&gt; &lt;!-- Import library --&gt; &lt;script src=&quot;https://code.highcharts.com/highcharts.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Highcharts.js&lt;/p&gt; &lt;!-- div to hold visualisation --&gt; &lt;div id=&quot;chart&quot; style=&quot;width:100%;height:400px;&quot;&gt;&lt;/div&gt; &lt;!-- Script to create visualisation --&gt; &lt;script&gt; var rawData = { categories: [&#39;Apples&#39;, &#39;Bananas&#39;, &#39;Oranges&#39;], series: [{ name: &#39;Jane&#39;, data: [1, 0, 4] }, { name: &#39;John&#39;, data: [5, 7, 3] }] }; var plotData = { xAxis: {categories: rawData.categories}, series: rawData.series }; var myChart = Highcharts.chart(&#39;chart&#39;, plotData); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 4.2.4 Chart.js &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt; &lt;head&gt; &lt;!-- Import library --&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/chart.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- canvas to hold visualisation --&gt; &lt;canvas id=&quot;chart&quot;&gt;&lt;/canvas&gt; &lt;!-- Script to create visualisation --&gt; &lt;script&gt; var el = document.getElementById(&#39;chart&#39;).getContext(&#39;2d&#39;); var rawData = { labels: [ &#39;Red&#39;, &#39;Blue&#39;, &#39;Yellow&#39;, &#39;Green&#39;, &#39;Purple&#39;, &#39;Orange&#39; ], datasets: [{ label: &#39;# of Votes&#39;, data: [12, 19, 3, 5, 2, 3] }] }; var plotData = { type: &#39;bar&#39;, data: rawData }; var myChart = new Chart(el, plotData); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; "],["compare-and-contrast.html", "4.3 Compare and Contrast", " 4.3 Compare and Contrast Where is the plot placed? ‘canvas’ vs ‘div’ How does the plotting library know where to put the plot? PlottingLibrary.function(x, options) Is x an element or the element’s ID? How is the plot configured? Is the plotData an array or object? Do we call a specific function for a particular plot type, or pass an option From an R perspective: Could we readily convert a data-frame to the rawData JSON? How much of the JS API should the R user be aware of? &lt;!-- Typical structure, based on the above --&gt; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt; &lt;head&gt; &lt;!-- Import library --&gt; &lt;script src=&quot;https://blah.blah/mycharts.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- element to hold visualisation --&gt; &lt;elementType id=&quot;chart&quot; style=&quot;width:100%;height:400px;&quot;&gt;&lt;/elementType&gt; &lt;!-- Script to create visualisation --&gt; &lt;script&gt; var rawData = { // JSON-like data } var plotData = { // all options required to make the plot }; var myChart = Mycharts.someFunction(elementOrID, plotData); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; "],["how-it-works.html", "4.4 How it works", " 4.4 How it works How would you write a package that calls “SuperCharts.js” if htmlwidgets didn’t exist? Create the HTML document Import the external libraries Add HTML element to hold visualisation Convert R-data to JSON and embed it in the HTML Append JS code to transfer data/element to library (and seemlessly work with other R/HTML/JS/CSS tools - RMarkdown / Shiny etc) Link to figure "],["summary.html", "4.5 Summary", " 4.5 Summary We studied the problem that htmlwidgets aims to solve And looked at how JS libraries are used within .html pages "],["meeting-videos-3.html", "4.6 Meeting Videos", " 4.6 Meeting Videos 4.6.1 Cohort 1 Meeting chat log 00:30:44 Ryan Metcalf: Adding reference to new element type: https://www.w3schools.com/html/html5_canvas.asp 00:31:04 LUCIO ENRIQUE CORNEJO RAMÍREZ: are there any advantages to adding the chart in a canvas element? Compared to Plotly, which adds the graphs in a div element 00:32:08 Ryan Metcalf: On the surface, I presume no. However, given GPU access, the Canvas Element may utilized more optimal rendering versus a Div that would use the CPU instead. 00:32:10 Ryan Metcalf: Just a thought. 00:34:30 Ryan Metcalf: StackOverflow is usually not the greatest reference point...but does provide some additional content to extend to other resources: https://stackoverflow.com/questions/5882716/html5-canvas-vs-svg-vs-div 00:34:43 Ryan Metcalf: Great question Lucio! 00:35:52 LUCIO ENRIQUE CORNEJO RAMÍREZ: Thanks for the answer :) 00:36:37 Ryan Metcalf: (Russ to expand to answer Lucio!!! 🙂) 00:37:07 Ryan S: I&#39;m familiar with html &lt;div&gt; elements, but not so much &lt;canvas&gt;. Is &lt;canvas&gt; just a lesser-known html element? 00:37:56 Ryan Metcalf: Newer supported tag. Released in 2004 by Apple. 00:38:16 Ryan S: 👍 00:38:26 Ryan Metcalf: Again, likely not the greatest reference....extending the topic: https://medium.com/@AmyScript/introduction-to-html5-canvas-8c1bad20e855#:~:text=The%20canvas%20element%20was,to%20draw%20graphics%20utilizing%20JavaScript. 00:42:16 Arthur Shaw: On CSS, here&#39;s the canonical meme that make&#39;s Russ&#39; point: http://gif-central.blogspot.com/2013/07/family-guy-css.html 00:43:32 Ryan S: LOL.... I can think of a dozen other subjects that gif applies to as well. 00:57:57 LUCIO ENRIQUE CORNEJO RAMÍREZ: thanks! "],["your-first-widget.html", "Chapter 5 Your First Widget", " Chapter 5 Your First Widget Learning objectives: How to build a minimal widget How each widget component works "],["scaffold-in-2-lines-of-code.html", "5.1 Scaffold in 2 lines of code", " 5.1 Scaffold in 2 lines of code Two lines of code: # 1 - Create a package (template) usethis::create_package(path = &quot;path/to/my.package&quot;) # 2 - Create a widget (scaffold) htmlwidgets::scaffoldWidget(name = &quot;my_widget&quot;) Line 1, obviously, creates a package Line 2, as the function name suggests, creates the scaffolding for a widget–that is the minimum files for defining a JS widget: my_widget.R. Functions in R that capture user parameters and pass them to JS. my_widget.js. Functions in JS, using content/parameters passed from R functions. my_widget.yaml JS dependencies, meaning the JS library the widget wraps as well as any libraries upon which that library depends. "],["r-functions.html", "5.2 R functions", " 5.2 R functions 5.2.1 Overview The R script created by htmlwidgets::scaffoldWidget(), my_widget.R contains three functions: my_widget. Binds together R and JS by: collecting R parameters (for JS) in a list x creating a widget that accesses x my_widgetOutput. Defines an *Output() function for Shiny. renderMy_widget. Defines a `render*()`` function for Shiny. #&#39; &lt;Add Title&gt; #&#39; #&#39; &lt;Add Description&gt; #&#39; #&#39; @import htmlwidgets #&#39; #&#39; @export my_widget &lt;- function(message, width = NULL, height = NULL, elementId = NULL) { # forward options using x x = list( message = message ) # create widget htmlwidgets::createWidget( name = &#39;my_widget&#39;, x, width = width, height = height, package = &#39;my.package&#39;, elementId = elementId ) } #&#39; Shiny bindings for my_widget #&#39; #&#39; Output and render functions for using my_widget within Shiny #&#39; applications and interactive Rmd documents. #&#39; #&#39; @param outputId output variable to read from #&#39; @param width,height Must be a valid CSS unit (like \\code{&#39;100\\%&#39;}, #&#39; \\code{&#39;400px&#39;}, \\code{&#39;auto&#39;}) or a number, which will be coerced to a #&#39; string and have \\code{&#39;px&#39;} appended. #&#39; @param expr An expression that generates a my_widget #&#39; @param env The environment in which to evaluate \\code{expr}. #&#39; @param quoted Is \\code{expr} a quoted expression (with \\code{quote()})? This #&#39; is useful if you want to save an expression in a variable. #&#39; #&#39; @name my_widget-shiny #&#39; #&#39; @export my_widgetOutput &lt;- function(outputId, width = &#39;100%&#39;, height = &#39;400px&#39;){ htmlwidgets::shinyWidgetOutput(outputId, &#39;my_widget&#39;, width, height, package = &#39;my.package&#39;) } #&#39; @rdname my_widget-shiny #&#39; @export renderMy_widget &lt;- function(expr, env = parent.frame(), quoted = FALSE) { if (!quoted) { expr &lt;- substitute(expr) } # force quoted htmlwidgets::shinyRenderWidget(expr, my_widgetOutput, env, quoted = TRUE) } 5.2.2 Output Create some output in this way: # create documentation (optionally) devtools::document() # while package project, load the package devtools::load_all() # create some output by passing a character from my_widget(message = &quot;Hello!&quot;) 5.2.2.1 &lt;div&gt; 5.2.2.2 &lt;head&gt; 5.2.2.3 &lt;script&gt; "],["js-function.html", "5.3 JS function", " 5.3 JS function 5.3.1 Overview HTMLWidgets.widget({ name: &#39;my_widget&#39;, type: &#39;output&#39;, factory: function(el, width, height) { // TODO: define shared variables for this instance return { renderValue: function(x) { // TODO: code to render the widget, e.g. el.innerText = x.message; }, resize: function(width, height) { // TODO: code to re-render the widget with a new size } }; } }); 5.3.2 Output 5.3.2.1 How What you put in the element is what you see. The section will follow this recipe: Change JS function, specifying what to put in element Reload package via devtools::load_all() Execute with my_widget() with appropriate parameter(s) 5.3.2.2 What Object itself: console.log(x) Text: innerText HTML of element: innerHTML Style of element style.* "],["js-dependencies.html", "5.4 JS dependencies", " 5.4 JS dependencies # (uncomment to add a dependency) # dependencies: # - name: # version: # src: # script: # stylesheet: "],["resources-1.html", "5.5 Resources", " 5.5 Resources For other treatments of creating a widget with {htmlwidgets}, see package vignette here. overview and worked example in js4shiny workshop materials here For a deeper dive into JS for R users, see JavaScript for Shiny users rstudio::conf(2020) workshop materials js4shiny package, which offers a REPL "],["meeting-videos-4.html", "5.6 Meeting Videos", " 5.6 Meeting Videos 5.6.1 Cohort 1 Meeting chat log 00:11:46 russ: Hi everyone 00:15:33 russ: We&#39;re having a live demo 00:53:14 russ: Ah. There&#39;s a neat step-through example in the shiny tutorials here: https://shiny.rstudio.com/articles/js-build-widget.html 00:53:52 russ: In the shiny server side, you do `renderMyWidget(MyWidget(data))` 01:02:56 russ: Ah! The &quot;data-for&quot; attribute seems to be a htmlwidgets-specific thing. If you look in the source code for htmlwidgets.js , how it is handled is described in there 01:08:19 russ: There&#39;s also a nice chapter about htmlwidgets in the Rmarkdown guide: https://bookdown.org/yihui/rmarkdown/html-widgets.html 01:13:24 LUCIO ENRIQUE CORNEJO RAM REZ: thanks everyone, bye 01:13:29 russ: THanks everyone "],["a-realistic-widget.html", "Chapter 6 A Realistic Widget", " Chapter 6 A Realistic Widget Learning objectives: Ability to utilize usethis::create_package and htmlwidgets::scafoldWidget() libraries Demonstrate the ability to modify your /inst/htmlwidgets/&lt;packagename&gt;.yaml for dependencies Modify both R and JS files allowing for mutual exchange of data Create a widgetname_html function for inline use of your package We are going to use the peity.js plugin authored by Ben Pickle which allows for a small &lt;svg&gt; pie, donut, line, or bar chart inline with your text. Steps to begin: Run usethis::create_package(\"mypeityexample\") Run htmlwidgets::scaffoldWidget(\"mypeityexample\") Note: I’m switching to a new example that won’t be included in our repo!!! It is inteded you can do this on your own! "],["dependencies.html", "6.1 Dependencies", " 6.1 Dependencies To make any software utility, package, or script operate we will need dependencies. The following script was extracted from Chapter 6 A Realistic Widget | JavaScript for R. Run the following script in your new RStudio Package: dir.create(&quot;./inst/htmlwidgets/jquery&quot;) dir.create(&quot;./inst/htmlwidgets/peity&quot;) peity &lt;- paste0( &quot;https://raw.githubusercontent.com/benpickles/&quot;, &quot;peity/master/jquery.peity.min.js&quot; ) jquery &lt;- paste0( &quot;https://code.jquery.com/jquery-3.5.1.min.js&quot; ) download.file( jquery, &quot;./inst/htmlwidgets/jquery/jquery.min.js&quot; ) download.file( peity, &quot;./inst/htmlwidgets/peity/jquery.peity.min.js&quot; ) The script will download these two JavaScript files to your local machine. An alternative is to use a Content Delivery Network (CDN) within your HTML file. We also need to add these dependencies to your /mypeityexample/inst/htmlwidgets/mypeityexample.ymal file. dependencies: - name: jQuery version: 3.5.1 src: htmlwidgets/jquery script: jquery.min.js - name: peity version: 3.3.0 src: htmlwidgets/peity script: jquery.peity.min.js Question for our group - How do I know what versions are required…for ANYTHING? How can I confirm and/or trace these dependencies? Validate the local copies of your dependencies are being used: devtools::load_all() system.file(&quot;htmlwidgets/peity&quot;, package = &quot;mypeityexample&quot;) [1] &quot;/Users/rmetcalf/Documents/GitHub/mypeityexample/inst/htmlwidgets/peity&quot; NOTE: Since I changed the name of the package to mypeityexample while also following the instructions in step 3….I had to modify my system.file and my package referene above to recieve my output. The final test of dependencies check is to run your package. It can be as simple as mypeityexample(\"test\"). The important point here is to open your browsers DevTools, expand the tag and look for the two script dependencies you included in your .yaml file. "],["implementation.html", "6.2 Implementation", " 6.2 Implementation "],["html-element.html", "6.3 HTML Element", " 6.3 HTML Element "],["meeting-videos-5.html", "6.4 Meeting Videos", " 6.4 Meeting Videos 6.4.1 Cohort 1 Meeting chat log 00:09:23 russ: Hi everyone 00:11:57 russ: Apologies for my pronunciation 00:20:13 russ: https://www.npmjs.com/package/peity?activeTab=dependencies 00:25:18 Arthur Shaw: Following on what Russ said, the peity library on npm shows no dependencies, but the use basic usage example uses jQuery. At the risk of being lawyerly, perhaps the library doesn&#39;t depend on jQuery, but using it may require (or most easily be done via) jQuery. npm link: https://www.npmjs.com/package/peity 01:03:30 russ: https://github.com/JohnCoene/javascript-for-r/blob/master/code/peity/R/peity.R 01:10:14 russ: https://github.com/ramnathv/htmlwidgets/blob/7b9c1ea3d9fbf4736d84f1fd1178fce0af29f8e3/R/htmlwidgets.R#L257 "],["the-full-monty.html", "Chapter 7 The Full Monty", " Chapter 7 The Full Monty Learning objectives: The nature of column-oriented vs row-oriented data serialisation How to ensure that R serialises data appropriately for use by JS How to modify the object returned by createWidget What order should dependencies be specified in the yaml We also see how to wrap a complicated JS library using htmlwidgets "],["workflow.html", "7.1 Workflow", " 7.1 Workflow Write an example using vanilla HTML/JS Initialise an R package Build scaffold for widget Declare any dependencies Add JS-side code for rendering Work out what data / data structure / chart options should be passed from R to JS Add R-side code for setting up data Check that the visualisation looks OK &lt;widget&gt;_html "],["gio.js-in-.html", "7.2 gio.js in .HTML", " 7.2 gio.js in .HTML The following shows how to use gio.js in a plain .html file. The code has been modified from that in the book: libraries are loaded from CDN the missing ‘data’ variable has been filled in The code is very similar to the main example on the gio.js homepage. &lt;!DOCTYPE html&gt; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt; &lt;head&gt; &lt;!-- Import Libraries - Note using CDN rather than local download --&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/three.js/110/three.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/giojs@2.0.0/build/gio.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- div to hold visualisation --&gt; &lt;div id=&quot;globe&quot; style=&quot;width: 200px; height: 200px&quot;&gt;&lt;/div&gt; &lt;!-- script to create visualisation --&gt; &lt;!-- Note: &#39;data&#39; must be defined before use --&gt; &lt;script&gt; var data = [ { &quot;e&quot;: &quot;CN&quot;, &quot;i&quot;: &quot;US&quot;, &quot;v&quot;: 3300000 }, { &quot;e&quot;: &quot;CN&quot;, &quot;i&quot;: &quot;RU&quot;, &quot;v&quot;: 10000 } ]; var container = document.getElementById(&quot;globe&quot;); var controller = new GIO.Controller(container); controller.addData(data); controller.init(); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; "],["r-package.html", "7.3 R package", " 7.3 R package We create an R package with a widget. usethis::create_package(&quot;giro&quot;) htmlwidgets::scaffoldWidget(&quot;newGio&quot;) We’ve done this a few times now: newGio.[R|yaml|js] files are created and opened "],["declaring-dependencies.html", "7.4 Declaring Dependencies", " 7.4 Declaring Dependencies We use v2.0.0 of gio.js and v110 of three.js, as in the book We add a ./dev script to contain the code that downloaded the dependencies: # ./dev/download-dependencies.R versions &lt;- list( three = &quot;110&quot;, gio = &quot;2.0.0&quot; ) dirs &lt;- list( htmlwidgets = file.path(&quot;inst&quot;, &quot;htmlwidgets&quot;) ) dirs$three &lt;- file.path(dirs$htmlwidgets, &quot;three&quot;) dirs$gio &lt;- file.path(dirs$htmlwidgets, &quot;gio&quot;) urls &lt;- list( three = glue::glue( &quot;https://cdnjs.cloudflare.com/ajax/libs/three.js/{versions$three}/three.min.js&quot; ), gio = glue::glue( &quot;https://cdn.jsdelivr.net/npm/giojs@{versions$gio}/build/gio.min.js&quot; ) ) # create directory for JS dependencies dir.create(dirs$three, recursive = TRUE) dir.create(dirs$gio, recursive = TRUE) # download the JS dependencies download.file(urls$three, file.path(dirs$three, &quot;three.min.js&quot;)) download.file(urls$gio, file.path(dirs$gio, &quot;gio.min.js&quot;)) We have done this before: Generate an R package with the scaffold for a widget and the dependencies of that widget downloaded into subdirectories. Now Tell {htmlwidgets} where the libraries can be found: dependencies: - name: three version: 110 src: htmlwidgets/three script: three.min.js - name: gio version: 2.0 src: htmlwidgets/gio script: gio.min.js Put “three.js” first, since “gio.js” depends on “three.js” "],["js-side-code.html", "7.5 JS-side code", " 7.5 JS-side code Skeleton for adding a GIO visualisation is placed into ‘renderValue’ function in the *.js file: Note that el is the element within which the GIO visualisation will be placed // ... snip ... factory: function(el, width, height) { return { renderValue: function(x) { // Iterations: // var container = document.getElementById(&quot;globe&quot;); // hard-coded element ID // var container = document.getElementById(el.id); // use the ID for the user&#39;s element // var controller = GIO.Controller(container); // ... but `container` _is_ `el` var controller = GIO.Controller(el); // controller.addData(data); controller.init(); } } // ... snip ... } With this we can generate an empty visualisation and add it to the user-supplied element el. "],["working-with-data.html", "7.6 Working with data", " 7.6 Working with data The data expected by GIO is as follows: // Array[Object{e: ISO2CODE, i: ISO2CODE, v: number}] [ { &quot;e&quot;: &quot;CN&quot;, // exporting country &quot;i&quot;: &quot;US&quot;, // importing country &quot;v&quot;: 3300000 // value }, { &quot;e&quot;: &quot;CN&quot;, &quot;i&quot;: &quot;RU&quot;, &quot;v&quot;: 10000 } ] https://giojs.org/html/docs/dataAdd.html R reads that as a data-frame: arcs &lt;- jsonlite::fromJSON(r&quot;([ { &quot;e&quot;: &quot;CN&quot;, // exporting country &quot;i&quot;: &quot;US&quot;, // importing country &quot;v&quot;: 3300000 // value }, { &quot;e&quot;: &quot;CN&quot;, &quot;i&quot;: &quot;RU&quot;, &quot;v&quot;: 10000 } ])&quot;) arcs ## e i v ## 1 CN US 3300000 ## 2 CN RU 10000 Conflict between R-style datasets and GIO-expected / JS-style datasets Objects in the JS array ~ Rows of the R data-frame Widget changes: - use data param rather than message in R function - include this as x.data in the object passed to JS - Use x.data in the controller.addData() call // ... snip ... factory: function(el, width, height) { return { renderValue: function(x) { var controller = GIO.Controller(el); controller.addData(x.data); controller.init(); } } // ... snip ... } newGio &lt;- function(data, width = NULL, height = NULL, elementId = NULL) { # forward options using x x = list( data = data ) # ... snip ... Look in devtools at the contents of the dataset: &lt;script type=&quot;application/json&quot; data-for=&quot;htmlwidget-b97f43c69fa089f58c24&quot;&gt; { &quot;x&quot;: { &quot;data&quot;:{ &quot;e&quot;:[&quot;CN&quot;,&quot;CN&quot;], &quot;i&quot;:[&quot;US&quot;,&quot;RU&quot;], &quot;v&quot;:[3300000,10000] } }, &quot;evals&quot;:[], &quot;jsHooks&quot;:[] } &lt;/script&gt; Columns in R have become the elements in x.data "],["transforming-data.html", "7.7 Transforming Data", " 7.7 Transforming Data We want the serialised data to be in the format the JS library expects Approaches: Convert the data on the JS side HTMLWidgets.dataframeToD3() Modify the data in R before serialising it e.g., make list of rows Modify the serialiser used by htmlwidgets Replace the serialiser used by htmlwidgets The default serialiser in htmlwidgets uses jsonlite::toJSON(..., dataframe = \"columns\"): # This is not what we want ... jsonlite::toJSON(arcs, dataframe = &quot;columns&quot;) ## {&quot;e&quot;:[&quot;CN&quot;,&quot;CN&quot;],&quot;i&quot;:[&quot;US&quot;,&quot;RU&quot;],&quot;v&quot;:[3300000,10000]} # This is what we want ... jsonlite::toJSON(arcs, dataframe = &quot;rows&quot;) ## [{&quot;e&quot;:&quot;CN&quot;,&quot;i&quot;:&quot;US&quot;,&quot;v&quot;:3300000},{&quot;e&quot;:&quot;CN&quot;,&quot;i&quot;:&quot;RU&quot;,&quot;v&quot;:10000}] jsonify::to_json(arcs, unbox = TRUE) ## Registered S3 method overwritten by &#39;jsonify&#39;: ## method from ## print.json jsonlite ## [{&quot;e&quot;:&quot;CN&quot;,&quot;i&quot;:&quot;US&quot;,&quot;v&quot;:3300000},{&quot;e&quot;:&quot;CN&quot;,&quot;i&quot;:&quot;RU&quot;,&quot;v&quot;:10000}] To alter the serialiser used by {htmlwidgets} you modify the attributes of the x that you pass into createWidget. Either with “TOJSON_ARGS” or “TOJSON_FUNC”. # modify the arguments of the default serialiser: # ... snip x &lt;- list(data = arcs) attr(x, &quot;TOJSON_ARGS&quot;) &lt;- list(dataframe = &quot;rows&quot;) # replace the default serialiser gio_serialiser = function(x) { jsonify::to_json(x, unbox = TRUE) } # ... snip x = list(data = arcs) attr(x, &quot;TOJSON_FUNC&quot;) &lt;- gio_serialiser See the Data Transformation section of one of the {htmlwidgets} vignettes: https://www.htmlwidgets.org/develop_advanced.html#data-transformation "],["on-print-method.html", "7.8 On Print Method", " 7.8 On Print Method In ggplot2: library(ggplot2) # create an object my_plot &lt;- ggplot(diamonds, aes(x = x, y = price)) + geom_point() # plot the object my_plot With a widget: # create an object my_widget &lt;- gio(arcs) # visualise the object my_widget The object created can be subsequently modified before visualisation (’print’ing). "],["meeting-videos-6.html", "7.9 Meeting Videos", " 7.9 Meeting Videos 7.9.1 Cohort 1 Meeting chat log LOG "],["advanced-topics.html", "Chapter 8 Advanced Topics", " Chapter 8 Advanced Topics Learning objectives: A little about JS scoping rules Resizing widgets Adding additional HTML content to a widget Overlapping, optional and conflicting JS dependencies Efficient data transfer Not covered in the bookclub Transferring JS code (just use htmlwidgets::JS) preRenderHook (modify the R-side widget object before sending across the wires) Unit testing (use testthat on the htmlwidget object) "],["sharing-variables-between-rendervalue-and-resize.html", "8.1 Sharing variables between renderValue and resize", " 8.1 Sharing variables between renderValue and resize newGio.js looks like this: HTMLWidgets.widget({ name: &quot;newGio&quot;, type: &quot;output&quot;, factory: function(el, width, height) { return { renderValue: function(x) { // I, the controller, am only available inside this function var controller = new GIO.Controller(el); // etc // }, resize: function(width, height) { // code to re-render the widget with a new size // ... ARG! I need to access the controller! } }; }; }); Three scoping rules in JavaScript: Block, Function and Global scope. Function scope is similar to R (for data access) make_adder &lt;- function(y) { adder &lt;- function(x) { x + y } # The returned function can access `y` even after `make_adder` has ran adder } add_10 &lt;- make_adder(10) add_10(3) ## [1] 13 So if you need to access the same variable in renderValue and resize, define that variable in a scope that they both can find: HTMLWidgets.widget({ name: &quot;newGio&quot;, type: &quot;output&quot;, factory: function(el, width, height) { var controller = new GIO.Controller(el); return { renderValue: function(x) { // `controller` is accessible here }, resize: function(width, height) { // ... and also here :0) } }; }; }); "],["sizing.html", "8.2 Sizing", " 8.2 Sizing Two main issues: What is the initial size of the image How should the image respond to changes in the surrounding page Ancillary issues: should sizing rules depend on context () Example based on GIO (as presented in Chapter 7) The widget.js file has an empty resize function at present arcs &lt;- jsonlite::fromJSON(&#39; [ {&quot;e&quot;: &quot;CN&quot;, &quot;i&quot;: &quot;US&quot;, &quot;v&quot;: 330000} ] &#39;) # fixed size newGio(arcs) # unreadably narrow newGio(arcs, width = &quot;50px&quot;) # half of the container&#39;s width # - automatically widens/narrows on page resizing newGio(arcs, width = &quot;50%&quot;) For sizing visualisations: width / height arguments in createWidget() sizingPolicy argument in createWidget() how should the widget be sized / padded in different settings resize() function in *.js called whenever the widget is resized See the example for {plotly}: https://github.com/plotly/plotly.R/blob/master/inst/htmlwidgets/plotly.js "],["adding-html-content.html", "8.3 Adding HTML content", " 8.3 Adding HTML content Use the htmlwidgets::prependContent(theWidget, someHTML) or appendContent functions Remember, createWidget returns an R object and we can modify it’s content before ’print’ing it "],["dependencies-1.html", "8.4 Dependencies", " 8.4 Dependencies JavaScript dependencies so far… declare them in myWidget.yaml dependencies: - name: three version: 110 src: htmlwidgets/three script: three.min.js - name: gio version: 2.0 src: htmlwidgets/gio script: gio.min.js But … Can we load only the small part of a JS library that our widget needs? Can we extend a widget with an optional library? A multiwidget report might load multiple copies of the same library load incompatible versions of the same library Tools: Library builders https://echarts.apache.org/en/builder.html Allows to create a subset of eCharts containing only the components that you need Chrome “DevTools::Network” tab which libraries are loaded how long it takes to load libraries htmlwidgets::getDependency() Access JS dependencies from an existing R package 8.4.1 Optional dependencies &amp; htmltools::htmlDependency Example: adding stats.js as an optional dependency for our GIO widget In JavaScript: // ... snip ... const controller = new GIO.Controller(el); // controller.enableStats(); We only want to enable stats.js when the user requests it. The library should not be loaded by the browser otherwise. For the user, the syntax should look like: # create a GIO visualisation without performance monitoring by `stats.js` gio(some_data) # create a GIO visualisation with performance monitoring by `stats.js` gio_stats(gio(some_data)) To make this work: Download stats.js to inst/htmlwidgets/stats/ Use htmltools::htmlDependency() to specify where stats.js can be found If the user calls gio_stats Append the html_dependency object to the htmlwidget Add a flag that stats.js is to be used in the browser-transferred data Modify the gio.js file to optionally call controller.enableStats() when the flag is set [Live coding] Issues with that pattern? Could we have written gio_stats() function in a separate package from {gio}? How could we write extension packages for {gio}? Recommendations: Use myWidget.yaml for hard dependencies Use htmltools::htmlDependency for optional dependencies If an established R package includes a JS dependency that your package needs, access the JS library from that R package "],["efficient-data-transfer.html", "8.5 Efficient data transfer", " 8.5 Efficient data transfer So far our data is: loaded into R serialised as JSON transferred to an HTML element deserialised by JS … presented … If data is really large, you could design your JS to pull from a server, or access content in a served static file. "],["meeting-videos-7.html", "8.6 Meeting Videos", " 8.6 Meeting Videos 8.6.1 Cohort 1 Meeting chat log 00:03:44 russ: Hi 00:06:17 Arthur Shaw: Wups. Sorry--my mic was on. Closed it now so you don&#39;t have to hear me sip tea ;) 00:50:48 Arthur Shaw: controller.enableStats(); 01:06:29 Arthur Shaw: This one: https://bookdown.org/yihui/rmarkdown-cookbook/html-widgets.html ? 01:07:48 Ryan Metcalf: Quick citation for my earlier topic: https://rdrr.io/github/rpc5102/rlocker/f/README.md The page points and a developer library for xAPI using the Learning Locker. Russ, to your benifit, I&#39;m fairly certain Learning Locker is an British open source project! "],["linking-widgets.html", "Chapter 9 Linking Widgets", " Chapter 9 Linking Widgets Learning objectives: Learn how crosstalk links widgets Explore linking widgets with gio as an example "],["motivating-example.html", "9.1 Motivating example", " 9.1 Motivating example 9.1.1 Basic library(DT) library(plotly) library(crosstalk) shared &lt;- SharedData$new(cars) bscols( plot_ly(shared, x = ~speed, y=~dist), datatable(shared, width = &quot;100%&quot;) ) 9.1.2 Shiny library(DT) library(shiny) library(crosstalk) ui &lt;- fluidPage( fluidRow( column(4, uiOutput(&quot;text&quot;)), column(8, DTOutput(&quot;table&quot;)) ) ) server &lt;- function(input, output) { sd &lt;- SharedData$new(cars) output$text &lt;- renderUI({ # get selected rows n_selected &lt;- sd$data(withSelection = TRUE) %&gt;% dplyr::filter(selected_ == TRUE) %&gt;% nrow() h3(n_selected, &quot;selected items&quot;) }) output$table &lt;- renderDT({ datatable(sd) }, server = FALSE) } shinyApp(ui, server) "],["how-crosstalk-talks.html", "9.2 How crosstalk “talks”", " 9.2 How crosstalk “talks” 9.2.1 Shared data # create shared data... sd_cars &lt;- SharedData$new(cars[1:2,]) # ...that is not a simple data frame class(sd_cars) ## [1] &quot;SharedData&quot; &quot;R6&quot; str(sd_cars) ## Classes &#39;SharedData&#39;, &#39;R6&#39; &lt;SharedData&gt; ## Public: ## clearSelection: function (ownerId = &quot;&quot;) ## clone: function (deep = FALSE) ## data: function (withSelection = FALSE, withFilter = TRUE, withKey = FALSE) ## groupName: function () ## initialize: function (data, key = NULL, group = createUniqueId(4, prefix = &quot;SharedData&quot;)) ## key: function () ## origData: function () ## selection: function (value, ownerId = &quot;&quot;) ## Private: ## .data: data.frame ## .filterCV: ClientValue, R6 ## .group: SharedData0076fce5 ## .key: NULL ## .rv: reactivevalues ## .selectionCV: ClientValue, R6 ## .updateSelection: function (value) 9.2.2 Communication 9.2.2.1 Keys Keys are the key for communication Action in widget 1 Listen for actions Capture key where action occurs Pass key to widget 2 React in widget 2 Listen for keys emitted by widget 1 Receive key from widget 1 Make changes in widget 2 using key from widget 1 Where do keys come from? Either bring them–for example, rownames in a dataframe Or set them (in the package logic) 9.2.2.2 Groups Keys identify observations in the same group Groups are Either for the same data set # same data; shared keys, by construction shared_cars &lt;- SharedData$new(mtcars, group = &quot;cars&quot;) Or for different data sets with shared keys # different data; shared keys shared_cars &lt;- SharedData$new(mtcars, group = &quot;cars&quot;) shared_cars_head &lt;- SharedData$new(head(mtcars), group = &quot;cars&quot;) "],["crosswalk-with-gio.html", "9.3 Crosswalk with gio", " 9.3 Crosswalk with gio 9.3.1 R code What to change: Accept shared data frame, rather than simple data frame: if (crosstalk::is.SharedData(data)) Extract original data from shared data object: data &lt;- data$origData() Extract group: group &lt;- data$groupName() Set crosstalk dependency: deps &lt;- crosstalk::crosstalkLibs() htmlwidgets::createWidget(dependencies = deps) gio &lt;- function(data, width = NULL, height = NULL, elementId = NULL) { # defaults to NULL group &lt;- NULL deps &lt;- NULL # uses crosstalk if (crosstalk::is.SharedData(data)) { group &lt;- data$groupName() data &lt;- data$origData() deps &lt;- crosstalk::crosstalkLibs() } # forward options using x x = list( data = data, style = &quot;default&quot;, crosstalk = list(group = group) # pass group ) attr(x, &#39;TOJSON_ARGS&#39;) &lt;- list(dataframe = &quot;rows&quot;) # create widget htmlwidgets::createWidget( name = &#39;gio&#39;, x, width = width, height = height, package = &#39;gio&#39;, elementId = elementId, sizingPolicy = htmlwidgets::sizingPolicy( padding = 0, browser.fill = TRUE, defaultWidth = &quot;100%&quot; ), preRenderHook = render_gio, # add crosstalk dependency dependencies = deps ) } 9.3.2 JS code 9.3.2.1 Register selections What to change: Create selection handler: var sel_handle = new crosstalk.SelectionHandle(); Set the group passed from R: sel_handle.setGroup(x.crosstalk.group); 9.3.2.2 Send selection from gio to another widget function callback (selectedCountry) { sel_handle.set([selectedCountry.ISOCode]); } controller.onCountryPicked(callback); 9.3.2.3 Receive selection from another widget; react in gio // placed in factory function sel_handle.on(&quot;change&quot;, function(e) { // selection comes from another widget if (e.sender !== sel_handle) { // clear the selection // not possible with gio.js } controller.switchCountry(e.value[0]); }); 9.3.3 Usage example library(DT) library(gio) library(crosstalk) url &lt;- paste0( &quot;https://raw.githubusercontent.com/JohnCoene/&quot;, &quot;javascript-for-r/master/data/countries.json&quot; ) arcs &lt;- jsonlite::fromJSON(url) # Wrap data frame in SharedData # key is importing country sd &lt;- SharedData$new(arcs, key = arcs$i) bscols( gio(sd), datatable(sd, width=&quot;100%&quot;, selection = &quot;single&quot;) ) "],["meeting-videos-8.html", "9.4 Meeting Videos", " 9.4 Meeting Videos 9.4.1 Cohort 1 Meeting chat log 00:01:04 LUCIO ENRIQUE CORNEJO RAM REZ: Hello 00:01:15 russ: Hi everyone 00:04:14 Ryan Metcalf: Forgive my delayed joining. 00:23:40 Ryan Metcalf: https://r6.r-lib.org/articles/Introduction.html 01:08:31 LUCIO ENRIQUE CORNEJO RAM REZ: thanks!! "],["final-revisions.html", "Chapter 10 Final Revisions ", " Chapter 10 Final Revisions "],["htmlwidgets-and-data.html", "10.1 Htmlwidgets and data", " 10.1 Htmlwidgets and data The different ways to call (visualisation) functions: qplot(x, price, data = diamonds) ggplot2(diamonds, aes(x = x, y = price)) + geom_point() plot(price ~ x, data = diamonds) plot(diamonds$x, diamonds$price) We have built a function gio(data, width, height, elementId). But: data must be in a specific form (columns = e, i, v). User should be able to tell gio what columns to use gio &lt;- function(data, source, # new target, # new value, # new width = NULL, height = NULL, elementId = NULL) { # ... snip ... # data &lt;- dplyr::select( data, i = {{ source }}, e = {{ target }}, v = {{ value }} ) x &lt;- list( data = data ) # ... snip .... # } User can now use gio(data, source = from, target = to, value = amount) where ‘data’ has column names ‘from’, ‘to’, and ‘amount’. Discuss: gio(df, source = notAColumn, ...) catching user errors gio(df, ..., value = v / 100) in-call data-modifications gio(df) should default columns be assumed if user’s data has ‘source’, ‘target’, ‘value’ columns? "],["plethora-of-options.html", "10.2 Plethora of options", " 10.2 Plethora of options Parameter list for gio.js: https://giojs.org/html/docs/configureParams.html control color brightness Passed in as JSON Many options JS library may evolve Users may want access to parts of the library you didn’t anticipate We could: port each option/param over to R gio(…snip…, control = controlArgs, color = colorArgs) gio(…snip…, controlStats, controlDisableUnmentioned, …snip…) use “…” gio &lt;- function(data, …snip…, …, width = NULL, …snip…){} (or introduce a parameter object?) g &lt;- function(...) { print(list(...)) } g(1) ## [[1]] ## [1] 1 g(a=2, 3, 4:5) ## $a ## [1] 2 ## ## [[2]] ## [1] 3 ## ## [[3]] ## [1] 4 5 g(control = list(initCountry = &quot;DE&quot;)) ## $control ## $control$initCountry ## [1] &quot;DE&quot; gio &lt;- function(data, source, target, value, ..., # new width = NULL, height = NULL, elementId = NULL) { # ... snip ... x = list( data = data, configs = list(...) ) # ... snip ... } controller = new GIO.Controller(el, x.configs); // or controller = new GIO.Controller(el); controller.configure(x.configs); Example: gio( df, from, to, traded, control = list(initCountry = &quot;US&quot;), color = list(selected = &quot;#ff4d4d&quot;) ) "],["interface-design.html", "10.3 Interface design", " 10.3 Interface design Further design decisions: gio(~args~, halo = TRUE) # or gio(~args~) %&gt;% gio::addHalo() Design for humans! But think ahead! Design for R Users (who are also humans)! "],["meeting-videos-9.html", "10.4 Meeting Videos", " 10.4 Meeting Videos 10.4.1 Cohort 1 Meeting chat log LOG "],["bidirectional-communication.html", "Chapter 11 Bidirectional Communication", " Chapter 11 Bidirectional Communication Learning objectives: Explore Shiny’s ability to communicate the R server and the user interface. Lean how to include JavaScript in Shiny applications. "],["websocket-an-shiny.html", "11.1 WebSocket an Shiny", " 11.1 WebSocket an Shiny A WebSocket is a persistent connection which will allow us to communicate Shiny’s main components: user interface (ui) server function (server) Figure 11.1: Websocket visualised Basic example of bidirectional communication: Send text input value to the R server, and then send it back to the UI. library(shiny) ui &lt;- fluidPage( textInput(&quot;nameInput&quot;, &quot;Your name&quot;), textOutput(&quot;nameOutput&quot;) ) server &lt;- function(input, output) { output$nameOutput &lt;- renderText({ input$nameInput }) } shinyApp(ui, server) WebSocket in action Figure 11.2: Shiny websocket visualised JavaScript is required for the communication between the R server and the user interface. "],["sessions.html", "11.2 Sessions", " 11.2 Sessions As seen in 11.1, for any Shiny application, Shiny isolates its users into what it referes to as a session. This way, any valid user interaction with a Shiny application updates only what is being shown in his or her screen. "],["alerts-an-example.html", "11.3 Alerts, an example", " 11.3 Alerts, an example Goals: Build a Shiny application using the jBox JavaScript library. Such application will display a notification at the click of an actionButton and will tell the server when such notification is closed. // Type into the browser console alert(&quot;Alert message&quot;) 11.3.1 Explore Let’s load jBox into a Shiny app, in order to play around with its features. library(shiny) ui &lt;- fluidPage( tags$head( tags$script( # Load jBox&#39;s script src = paste0( &quot;https://cdn.jsdelivr.net/gh/StephanWagner/&quot;, &quot;jBox@v1.2.0/dist/jBox.all.min.js&quot; ) ), # Load jBox&#39;s styling tags$link( rel = &quot;stylesheet&quot;, href = paste0( &quot;https://cdn.jsdelivr.net/gh/StephanWagner/&quot;, &quot;jBox@v1.2.0/dist/jBox.all.min.css&quot; ) ) ), # Create a jBox alert tags$script(&quot; new jBox(&#39;Notice&#39;, { content: &#39;Hurray! A notice!&#39; });&quot; ), # Add a title and set its HTML element identifier h1(&quot;Exploring jBox&quot;, id = &quot;title&quot;) ) server &lt;- function(input, output) {} shinyApp(ui, server) Be careful when searching for jBox’s documentation, do not Google jBox; type jBox js instead. A couple more jBox features: // Type into the browser console new jBox( // Set plugin: Tooltip, Modal, Notice, ... &#39;Tooltip&#39;, { attach: &#39;#title&#39;, trigger: &#39;click&#39;, onCreated: function () { this.setContent(&#39;This is my jBox!&#39;); }, onOpen: function () { new jBox(&#39;Notice&#39;, {content: &#39;Here I come!&#39;, color: &#39;green&#39;}); }, onClose: function () { new jBox(&#39;Notice&#39;, {content: &#39;See ya later!&#39;, color: &#39;red&#39;}); } } ); 11.3.2 From R to JavaScript Goal: Dynamically set the message in the alert created with jBox. Data can be sent (through the WebSocket) from the server to the client, via R’s session object and its sendCustomMessage method/function. Let’s update the server function of our previous app server &lt;- function(input, output, session) { session$sendCustomMessage( # Set the identifier to send-notice, # for JavaScript to &quot;catch&quot; type = &quot;send-notice&quot;, # Data to send to JavaScript message = &quot;Hi there!&quot; ) } JavaScript’s Shiny object and its method addCustomMessageHandler provides to JavaScript the instructions for when data is sent from the server, with a certain type/identifier. tags$script( &quot;Shiny.addCustomMessageHandler( type = &#39;send-notice&#39;, function (message) { new jBox(&#39;Notice&#39;, { content: message }); } );&quot; ) Similar example: library(shiny) ui &lt;- fluidPage( tags$head( tags$script( src = paste0( &quot;https://cdn.jsdelivr.net/gh/StephanWagner/&quot;, &quot;jBox@v1.2.0/dist/jBox.all.min.js&quot; ) ), tags$link( rel = &quot;stylesheet&quot;, href = paste0( &quot;https://cdn.jsdelivr.net/gh/StephanWagner/&quot;, &quot;jBox@v1.2.0/dist/jBox.all.min.css&quot; ) ) ), textInput(&quot;msg&quot;, &quot;notice&quot;), actionButton(&quot;notify&quot;, &quot;Notify myself&quot;), tags$script( &quot;Shiny.addCustomMessageHandler( type = &#39;send-notice&#39;, function (message) { new jBox(&#39;Notice&#39;, { content: message }); // How was the message data converted? console.log(message, typeof message); } );&quot; ) ) server &lt;- function(input, output, session) { observeEvent(input$notify, { session$sendCustomMessage( type = &quot;send-notice&quot;, message = paste0(input$msg, &quot;!!!&quot;) ) }) } shinyApp(ui, server) Figure 11.3: Shiny alert with custom messages 11.3.3 Serialisation Note that the jBox notice is configured using a JSON object: new jBox(&#39;Notice&#39;, { content: &#39;Hurray! A notice!&#39;, &quot;color&quot;: &#39;red&#39; }); R’s analogue for JSON object: options &lt;- list( content = &#39;Hurray! A notice!&#39;, color = &#39;red&#39; ) jsonlite::toJSON(options, pretty = TRUE, auto_unbox = TRUE) { &quot;content&quot;: &quot;Hurray! A notice!&quot;, &quot;color&quot;: &quot;red&quot; } Using R’s lists for sending data in JSON format: library(shiny) ui &lt;- fluidPage( tags$head( tags$script( src = paste0( &quot;https://cdn.jsdelivr.net/gh/StephanWagner/&quot;, &quot;jBox@v1.2.0/dist/jBox.all.min.js&quot; ) ), tags$link( rel = &quot;stylesheet&quot;, href = paste0( &quot;https://cdn.jsdelivr.net/gh/StephanWagner/&quot;, &quot;jBox@v1.2.0/dist/jBox.all.min.css&quot; ) ), tags$script( &quot;Shiny.addCustomMessageHandler( type = &#39;send-notice&#39;, function (message) { // Use notice sent from the server new jBox(&#39;Notice&#39;, message); } );&quot; ) ) ) server &lt;- function(input, output, session){ # Define notice options notice = list( content = &#39;Hello from the server&#39;, color = &#39;black&#39; ) # Send the notice session$sendCustomMessage( type = &quot;send-notice&quot;, message = notice ) } shinyApp(ui, server) 11.3.4 JavaScript to R Goal: Send data from JavaScript to R when the notice is closed. Remember that such event (notice gets closed) can be used like this: // Type into the browser console new jBox( // Set plugin: Tooltip, Modal, Notice, ... &#39;Tooltip&#39;, { attach: &#39;#title&#39;, trigger: &#39;click&#39;, onCreated: function () { this.setContent(&#39;This is my jBox!&#39;); }, onOpen: function () { new jBox(&#39;Notice&#39;, {content: &#39;Here I come!&#39;, color: &#39;green&#39;}); }, onClose: function () { new jBox(&#39;Notice&#39;, {content: &#39;See ya later!&#39;, color: &#39;red&#39;}); } } ); We’ll send data from JavaScript to the R Server, via a simplified Shiny input. Shiny.setInputValue(&#39;inputId&#39;, inputValue) Example app different than the one provided in the main book: library(shiny) ui &lt;- fluidPage( tags$head( # Load jBox dependencies tags$script( src = paste0( &quot;https://cdn.jsdelivr.net/gh/StephanWagner/&quot;, &quot;jBox@v1.2.0/dist/jBox.all.min.js&quot; ) ), tags$link( rel = &quot;stylesheet&quot;, href = paste0( &quot;https://cdn.jsdelivr.net/gh/StephanWagner/&quot;, &quot;jBox@v1.2.0/dist/jBox.all.min.css&quot; ) ), # Set custom message handler tags$script( &quot;Shiny.addCustomMessageHandler( type = &#39;send-notice&#39;, function (message) { message.onClose = function () { Shiny.setInputValue( &#39;notice_close&#39;, document.getElementById(&#39;time&#39;).innerText ); } new jBox(&#39;Notice&#39;, message); });&quot; ) ), tags$body( # Show time counter div( span(&quot;Time counter (in seconds): &quot;, style = &quot;font-weight: bold&quot;), span(&quot;&quot;, id = &quot;time&quot;) ), br(), # Show notice actionButton(&quot;show&quot;, &quot;Show the notice&quot;), # Update the time after each second tags$script( &quot;let time = 0; setInterval( // Update second counter function () { time += 1; document.getElementById(&#39;time&#39;).innerText = time; }, // Repeat every second 1000 ); &quot;), ) ) server &lt;- function(input, output, session){ observeEvent(input$show, { # Define notice options notice = list( content = &quot;Click to send data to the R Server&quot;, color = &#39;black&#39; ) # Send the notice session$sendCustomMessage( type = &quot;send-notice&quot;, message = notice ) }) # Print the output of the notice_close event (when fired) observeEvent(input$notice_close, { print(input$notice_close) }) } shinyApp(ui, server) Figure 11.4: JS (eventually) sends data to R server "],["meeting-videos-10.html", "11.4 Meeting Videos", " 11.4 Meeting Videos 11.4.1 Cohort 1 Meeting chat log LOG "],["a-complete-integration.html", "Chapter 12 A Complete Integration", " Chapter 12 A Complete Integration Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1.html", "12.1 SLIDE 1", " 12.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-11.html", "12.2 Meeting Videos", " 12.2 Meeting Videos 12.2.1 Cohort 1 Meeting chat log LOG "],["tips-tricks.html", "Chapter 13 Tips &amp; Tricks", " Chapter 13 Tips &amp; Tricks Learning objectives: Explore tools already available in Shiny by default. "],["shiny-events.html", "13.1 Shiny events", " 13.1 Shiny events GOAL: Create a notification whenever the Shiny server is busy. List of JavaScript events in Shiny. Code for gif to show when Shiny is busy: dir.create(&quot;www&quot;) file.create(&quot;www/script.js&quot;) file.create(&quot;www/style.css&quot;) # gif gif &lt;- paste0( &quot;https://github.com/JohnCoene/javascript-for-r/&quot;, &quot;raw/master/code/events/www/typing.gif&quot; ) download.file(gif, &quot;www/typing.gif&quot;) It may be necessary to manually download. such gif. Code for Shiny app (app.R): library(shiny) shiny::addResourcePath(&quot;www&quot;, &quot;www&quot;) ui &lt;- fluidPage( # import dependencies tags$head( tags$link(href = &quot;www/style.css&quot;, rel = &quot;stylesheet&quot;), tags$script(src = &quot;www/script.js&quot;) ), # gif indicator tags$img(src = &quot;www/typing.gif&quot;, id = &quot;loading&quot;), plotOutput(&quot;plot&quot;), actionButton(&quot;render&quot;, &quot;render&quot;) ) server &lt;- function(input, output, session) { output$plot &lt;- renderPlot({ input$render # redraw on click # simulate time consuming computations Sys.sleep(2) plot(cars) }) } shinyApp(ui, server) Style the gif (styles.css): #loading{ top: 20px; right: 20px; height: 200px; z-index: 9999; position: absolute; visibility: hidden; } Show the gif when Shiny is busy (script.js): $(document).on(&#39;shiny:busy&#39;, function(event) { // Retrieve gif const gif = document.getElementById(&quot;loading&quot;); // Make it visible gif.style.visibility = &quot;visible&quot;; }); Hide the gid when Shiny is idle (script.js): $(document).on(&#39;shiny:idle&#39;, function(event) { const gif = document.getElementById(&quot;loading&quot;); // Hide gif gif.style.visibility = &quot;hidden&quot;; }); "],["table-buttons.html", "13.2 Table buttons", " 13.2 Table buttons GOAL: Add to a table a column of one button per row. Code for new Shiny app (app.R): library(DT) library(shiny) ui &lt;- fluidPage( DTOutput(&quot;table&quot;) ) server &lt;- function(input, output) { output$table &lt;- renderDT({ datatable( mtcars, escape = FALSE, selection = &quot;none&quot;, rownames = FALSE, style = &quot;bootstrap&quot; ) }) } shinyApp(ui, server) Only the escape = FALSE is necessary. It will allow us to insert HTML code into the table, and have it appear as is, instead of as a string. The HTML code we will insert is of the form: &lt;a class=&quot;btn btn-primary&quot; onclick=&quot;Shiny.setInputValue(&#39;click&#39;, &#39;Mazda RX4&#39;)&quot;&gt;Click me&lt;/a&gt; The book uses the sprintf function to create each of those buttons, changing the row name value, but the app did not work properly, due to an issue with the ‘“’ symbols. An alternative solution will be presented, when necessary. # On click function onclick &lt;- sprintf( &quot;Shiny.setInputValue(&#39;click&#39;, &#39;%s&#39;)&quot;, rownames(mtcars) ) # Button with onClick function # Book version button &lt;- sprintf( &quot;&lt;a class=&#39;btn btn-primary&#39; onClick=&#39;%s&#39;&gt;Click me&lt;/a&gt;&quot;, onclick ) # Alternative version button &lt;- paste0( &#39;&lt;a class=&quot;btn btn-primary&quot; onClick=&quot;&#39;, onclick, &#39;&quot;&gt;Click me&lt;/a&gt;&#39; ) Finally, we add a column of buttons and show the value of the click input. Final code (app.R): library(DT) library(shiny) ui &lt;- fluidPage( br(), DTOutput(&quot;table&quot;), strong(&quot;Clicked Model:&quot;), verbatimTextOutput(&quot;model&quot;) ) server &lt;- function(input, output) { output$table &lt;- renderDT({ # On click function onclick &lt;- sprintf( &quot;Shiny.setInputValue(&#39;click&#39;, &#39;%s&#39;)&quot;, rownames(mtcars) ) # &#39;Button&#39; with onClick function button &lt;- paste0( &#39;&lt;a class=&quot;btn btn-primary&quot; onClick=&quot;&#39;, onclick, &#39;&quot;&gt;Click me&lt;/a&gt;&#39; ) # Add &#39;buttons&#39; to data.frame mtcars$button &lt;- button datatable( mtcars, escape = FALSE, selection = &quot;none&quot;, rownames = FALSE, style = &quot;bootstrap&quot; ) }) output$model &lt;- renderPrint({ print(input$click) }) } shinyApp(ui, server) "],["jquery.html", "13.3 jQuery", " 13.3 jQuery GOAL: Use jQuery to toggle the display of HTML element(s), via a message handler. The jQuery library allows for easier DOM manipulation, event handling and CSS animations. Shiny imports jQuery by default. Go to this website and execute the following lines of code, separately, in the browser console: // Exploring CSS selectors $(&quot;#rStudioHeader&quot;).toggle(); // id $(&quot;.highlight&quot;).toggle(); // class $(&quot;p&quot;).toggle(); // HTML element Code for the Shiny app: library(shiny) ui &lt;- fluidPage( tags$head( tags$script( &quot;Shiny.addCustomMessageHandler( &#39;jquery&#39;, function(selector) { $(selector).toggle(); });&quot; ) ), actionButton(&quot;toggle&quot;, &quot;Toggle text&quot;), h1(&quot;This text is shown!&quot;, id = &quot;title&quot;, class = &quot;to-toggle&quot;), tags$div(class = &quot;to-toggle&quot;, verbatimTextOutput(&quot;text&quot;)) ) server &lt;- function(input, output, session) { observeEvent(input$toggle, { session$sendCustomMessage(&#39;jquery&#39;, &quot;.to-toggle&quot;) }) output$text &lt;- renderPrint(print(input$toggle)) } shinyApp(ui, server) "],["extra.html", "13.4 Extra", " 13.4 Extra GOAL: Explore a couple more Shiny events to gain further insight into the bidirectional communication between JavaScript and R. shiny::message event Triggered when any messages are received from the server. Run the previous app and execute the following code in the browser console (in different sessions): $(document).on(&quot;shiny:message&quot;, function (event) { console.log(event); }); We can even change the data sent via the custom message. $(document).on(&quot;shiny:message&quot;, function (event) { if(event.message.custom.jquery) { event.message.custom.jquery = &quot;#title&quot;; } }); shiny::value event Triggered when an output receives a value from the server. Suppose you have an output x which takes a reactive dependency on y (this could be an input or another reactive object). When y changes, the first thing that happens is that x is invalidated (and the shiny:outputinvalidated event for x is fired). The shiny:recalculating event is the next one to be fired for x. This may happen either immediately after the previous event, or it can take a while, depending on whether or not there are other previously invalidated objects also waiting to be recalculated. Once the value of x has finished recalculating, its shiny:recalculated event is fired. The last event to be fired for x is shiny:value (or shiny:error if the recalculation resulted in an error). Source: https://shiny.rstudio.com/articles/js-events.html $(document).on(&quot;shiny:value&quot;, function (event) { console.log(event); }); We can even change the value sent from the server. $(document).on(&quot;shiny:value&quot;, function (event) { event.value = &quot;Oh Hi Mark&quot;; }); shiny::inputchanged event Triggered when an input possibly has a new value. $(document).on(&#39;shiny:inputchanged&#39;, function(event) { console.log(event); }); You alreday know what’s coming next … $(document).on(&#39;shiny:inputchanged&#39;, function(event) { if (event.name === &quot;toggle&quot;) { event.value += 2; } }); "],["meeting-videos-12.html", "13.5 Meeting Videos", " 13.5 Meeting Videos 13.5.1 Cohort 1 Meeting chat log LOG "],["custom-outputs.html", "Chapter 14 Custom Outputs", " Chapter 14 Custom Outputs Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-1.html", "14.1 SLIDE 1", " 14.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-13.html", "14.2 Meeting Videos", " 14.2 Meeting Videos 14.2.1 Cohort 1 Meeting chat log LOG "],["custom-inputs.html", "Chapter 15 Custom Inputs", " Chapter 15 Custom Inputs Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-2.html", "15.1 SLIDE 1", " 15.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-14.html", "15.2 Meeting Videos", " 15.2 Meeting Videos 15.2.1 Cohort 1 Meeting chat log LOG "],["cookies.html", "Chapter 16 Cookies", " Chapter 16 Cookies Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-3.html", "16.1 SLIDE 1", " 16.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-15.html", "16.2 Meeting Videos", " 16.2 Meeting Videos 16.2.1 Cohort 1 Meeting chat log LOG "],["widgets-with-shiny.html", "Chapter 17 Widgets with Shiny", " Chapter 17 Widgets with Shiny Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-4.html", "17.1 SLIDE 1", " 17.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-16.html", "17.2 Meeting Videos", " 17.2 Meeting Videos 17.2.1 Cohort 1 Meeting chat log LOG "],["the-v8-engine.html", "Chapter 18 The V8 Engine", " Chapter 18 The V8 Engine Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-5.html", "18.1 SLIDE 1", " 18.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-17.html", "18.2 Meeting Videos", " 18.2 Meeting Videos 18.2.1 Cohort 1 Meeting chat log LOG "],["machine-learning.html", "Chapter 19 Machine Learning", " Chapter 19 Machine Learning Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-6.html", "19.1 SLIDE 1", " 19.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-18.html", "19.2 Meeting Videos", " 19.2 Meeting Videos 19.2.1 Cohort 1 Meeting chat log LOG "],["managing-javascript.html", "Chapter 20 Managing JavaScript", " Chapter 20 Managing JavaScript Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-7.html", "20.1 SLIDE 1", " 20.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-19.html", "20.2 Meeting Videos", " 20.2 Meeting Videos 20.2.1 Cohort 1 Meeting chat log LOG "],["discover-webpack-and-npm.html", "Chapter 21 Discover Webpack and NPM", " Chapter 21 Discover Webpack and NPM Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-8.html", "21.1 SLIDE 1", " 21.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-20.html", "21.2 Meeting Videos", " 21.2 Meeting Videos 21.2.1 Cohort 1 Meeting chat log LOG "],["webpack-with-r.html", "Chapter 22 Webpack with R", " Chapter 22 Webpack with R Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-9.html", "22.1 SLIDE 1", " 22.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-21.html", "22.2 Meeting Videos", " 22.2 Meeting Videos 22.2.1 Cohort 1 Meeting chat log LOG "],["webpack-advanced.html", "Chapter 23 Webpack Advanced", " Chapter 23 Webpack Advanced Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-10.html", "23.1 SLIDE 1", " 23.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-22.html", "23.2 Meeting Videos", " 23.2 Meeting Videos 23.2.1 Cohort 1 Meeting chat log LOG "],["conclusion.html", "Chapter 24 Conclusion", " Chapter 24 Conclusion Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-11.html", "24.1 SLIDE 1", " 24.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-23.html", "24.2 Meeting Videos", " 24.2 Meeting Videos 24.2.1 Cohort 1 Meeting chat log LOG "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
